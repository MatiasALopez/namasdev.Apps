@using namasdev.Core.Types;
@using namasdev.Apps.Entidades;
@using namasdev.Apps.Entidades.Metadata;
@using namasdev.Web.Helpers;
@using namasdev.Apps.Web.Portal.ViewModels.EntidadesPropiedades;
@model EntidadesPropiedadesViewModel
@{
    Layout = "~/Views/Shared/_EntidadTabsLayout.cshtml";
    ViewBag.Title = EntidadPropiedadMetadata.ETIQUETA_PLURAL;
    var controlesIds = new
    {
        TabPropiedades = $"tab{EntidadPropiedadMetadata.NOMBRE_PLURAL}",
        Form = $"frm{EntidadPropiedadMetadata.NOMBRE_PLURAL}",
        TablaContainer = $"div{EntidadPropiedadMetadata.NOMBRE_PLURAL}Container",
        Tabla = $"tbl{EntidadPropiedadMetadata.NOMBRE_PLURAL}",
        BotonActualizarOrden = "btnActualizarOrden"
    };
    var clasesCss = new
    {
        BotonOrdenSubir = "btn-orden-subir",
        BotonOrdenBajar = "btn-orden-bajar",
        BotonEliminar = "btn-eliminar"
    };
    var controlesTamaños = new
    {
        ModalEntidadAlto = "600px"
    };
    var atributosData = new 
    {
        Ordenable = "ordenable"
    };
    var funcionesJS = new
    {
        ModalEntidad_OnHidden = $"modal{EntidadPropiedadMetadata.NOMBRE}_onHidden"
    };
}
@Html.Partial("_ResultadoOk")
@Html.Partial("_Errores")
<div class="mt-3">
    <strong>@Html.DisplayNameFor(m => m.EntidadNombre):</strong> @Model.EntidadNombre
</div>
<div class="row mt-3">
    <div class="col-md-12">
        <a href="@Url.Action("Agregar", "EntidadesPropiedades", new { entidadId = Model.Id })" class="btn btn-primary"
           data-iframe data-iframe-title="Agregar propiedad" data-iframe-height="@controlesTamaños.ModalEntidadAlto" data-iframe-onhidden="@funcionesJS.ModalEntidad_OnHidden">Agregar</a>
    </div>
</div>
<div class="row mt-3">
    <div class="col-md-12">
        @if (Model.TieneItems)
        {
            <form id="@controlesIds.Form" action="@Url.Action()" method="post">
                @Html.AntiForgeryToken()
                <div id="@controlesIds.TablaContainer" class="table-responsive">
                    <table id="@controlesIds.Tabla" class="table table-striped table-bordered">
                        <thead>
                            <tr>
                                <th></th>
                                <th></th>
                                <th>@Html.DisplayNameFor(m => m.Items[0].Nombre)</th>
                                <th>@Html.DisplayNameFor(m => m.Items[0].TipoNombre)</th>
                                <th class="text-center">@Html.DisplayNameFor(m => m.Items[0].PermiteNull)</th>
                                <th class="text-center">@Html.DisplayNameFor(m => m.Items[0].Orden)</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                int cant = Model.Items.Count;
                            }
                            @for (var i = 0; i < cant; i++)
                            {
                                <tr @(Html.Raw($"data-{atributosData.Ordenable}=\"{Model.Items[i].OrdenarDisponible.ToString().ToLower()}\""))>
                                    <td class="text-center">
                                        @Html.HiddenFor(m => m.Items[i].Id)
                                        @Html.CheckBoxFor(m => m.Items[i].Seleccionado)
                                    </td>
                                    <td class="text-center">
                                        @if (Model.Items[i].EsClave)
                                        {
                                            <i class="fa fa-key" data-toggle="tooltip" title="Clave"></i>
                                        }
                                    </td>
                                    <td>@Model.Items[i].Nombre</td>
                                    <td>@Model.Items[i].TipoNombre</td>
                                    <td class="text-center">@Formateador.SiNo(Model.Items[i].PermiteNull)</td>
                                    <td class="text-center">
                                        @Html.HiddenFor(m => m.Items[i].Orden)
                                        @Html.HiddenFor(m => m.Items[i].OrdenInicial)
                                        @if (Model.Items[i].OrdenarDisponible)
                                        {
                                            <a href="#" class="@clasesCss.BotonOrdenSubir"><i data-toggle="tooltip" title="Subir" class="fa fa-arrow-up"></i></a>
                                            <a href="#" class="@clasesCss.BotonOrdenBajar"><i data-toggle="tooltip" title="Bajar" class="fa fa-arrow-down"></i></a>
                                        }
                                    </td>
                                    <td class="text-center">
                                        @if (Model.Items[i].EditarDisponible)
                                        {
                                            <a href="@Url.Action("Editar", new { id = Model.Items[i].Id, Model.Items[i].EntidadId })" class="btn btn-sm btn-outline-secondary"
                                               data-iframe data-iframe-title="Editar propiedad" data-iframe-height="@controlesTamaños.ModalEntidadAlto" data-iframe-onhidden="@funcionesJS.ModalEntidad_OnHidden"><i class="fa fa-edit" data-toggle="tooltip" title="Editar"></i></a>
                                        }
                                        
                                        @if (Model.Items[i].EliminarDisponible)
                                        {
                                            <button class="btn btn-sm btn-outline-danger @clasesCss.BotonEliminar" data-id="@Model.Items[i].Id"><i data-toggle="tooltip" title="Eliminar" class="fa fa-trash"></i></button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div>
                    <button type="submit" class="btn btn-primary" name="@Html.NameFor(m => m.Operacion)" value="@EntidadesPropiedadesViewModel.OPERACION_ESTABLECER_CLAVE">Establecer como clave</button>
                    <button id="@controlesIds.BotonActualizarOrden" type="submit" class="btn btn-info" name="@Html.NameFor(m => m.Operacion)" value="@EntidadesPropiedadesViewModel.OPERACION_ACTUALIZAR_ORDEN">Actualizar orden</button>
                </div>
            </form>
        }
        else
        {
            <div class="alert alert-warning">No hay propiedades para mostrar.</div>
        }
    </div>
</div>
@section bodyScripts {
    <script type="text/javascript">
        $(function () {
            namasdevApps.setActiveMenuOption('entidades');
            $('#@controlesIds.TabPropiedades').addClass('active');

            establecerEstadoBotonGuardarOrden();

            $('.@clasesCss.BotonOrdenBajar, .@clasesCss.BotonOrdenSubir')
                .on('click', function (ev) {
                    ev.preventDefault();

                    var $boton = $(this);
                    moverItem($boton.closest('tr'), $boton.hasClass('@clasesCss.BotonOrdenSubir'));

                    return false;
                });

            $('#@controlesIds.Tabla')
                .on('click', '.@clasesCss.BotonEliminar', function (ev) {
                    ev.preventDefault();

                    var id = $(this).data('id');
                    if (!id) {
                        return;
                    }

                    var options = {
                        showLoadingSelector: '#@controlesIds.TablaContainer',
                        confirm: true,
                        confirmTitle: 'Eliminar propiedad',
                        confirmMessage: '¿Estás seguro que deseas eliminar la propiedad seleccionada?'
                    };
                    namasdevApps.postJson(
                        '@Url.Action("Eliminar")/' + id,
                        nmd.ui.forms.createDataWithAntiForgeryToken('#@controlesIds.Form'),
                        function (response) {
                            if (response.success) {
                                nmd.ui.controls.showSuccessModal(
                                    'La propiedad fue eliminada correctamente.',
                                    function () {
                                        nmd.page.reloadPage();
                                    });
                            }
                            else {
                                namasdevApps.showErrorModal(response.message);
                            }
                        },
                        options
                    );

                    return false;
                });

            function establecerEstadoBotonGuardarOrden() {
                var tieneOrdenModificado = false;
                $('#@controlesIds.Tabla tbody tr').each(function () {
                    var $fila = $(this),
                        $orden = $fila.find('input[name$="Orden"]'),
                        $ordenInicial = $fila.find('input[name$="OrdenInicial"]');
                    if ($orden.val() != $ordenInicial.val()) {
                        tieneOrdenModificado = true;
                    }
                });

                $('#@controlesIds.BotonActualizarOrden').prop('disabled', !tieneOrdenModificado);
            }

            function moverItem($fila, subir) {
                var orden = obtenerOrdenItem($fila);

                var $filaAIntercambiar;
                if (subir) {
                    $filaAIntercambiar = $fila.prev();
                    if (!itemSePuedeOrdenar($filaAIntercambiar)) {
                        return;
                    }

                    $fila.insertBefore($filaAIntercambiar);
                } else {
                    $filaAIntercambiar = $fila.next();
                    if (!itemSePuedeOrdenar($filaAIntercambiar)) {
                        return;
                    }

                    $fila.insertAfter($filaAIntercambiar);
                }

                actualizarOrdenItem($fila);
                actualizarOrdenItem($filaAIntercambiar);

                establecerEstadoBotonGuardarOrden();
            }

            function actualizarOrdenItem($fila) {
                $fila.find('input[name$="Orden"]').val(obtenerOrdenItem($fila));
            }

            function obtenerOrdenItem($fila) {
                return $fila.index() + 1;
            }

            function itemSePuedeOrdenar($fila) {
                return $fila.data('@atributosData.Ordenable') == true;
            }
        });

        function @(funcionesJS.ModalEntidad_OnHidden)() {
            nmd.page.reloadPage();
        }
    </script>
}
