@using namasdev.Core.Types;
@using namasdev.Apps.Entidades.Valores;
@using namasdev.Apps.Web.Portal.Helpers;
@model namasdev.Apps.Entidades.Entidad
@{
    var namespaces = new
    {
        Aplicacion = Model.AplicacionVersion.Aplicacion.Nombre
    };
    var clases = new
    {
        Config = string.Format("{0}Config", Model.Nombre),
        ConfigBase =
            Model.PropiedadesDefault.IDPropiedadTipoId.HasValue && Model.PropiedadesDefault.AuditoriaBorrado
            ? "EntidadBorradoConfigBase"
            : "EntityTypeConfiguration",
        Metadata = string.Format("{0}Metadata", Model.Nombre),
    };
    string propiedadMetadataBase;
    var propiedadesReglas = new Dictionary<string, string>();
    List<string> propiedadReglas;
    foreach (var p in Model.Propiedades)
    {
        if (p.EsAuditoriaBorrado())
        {
            continue;
        }
        propiedadMetadataBase = string.Format("{0}.Propiedades.{1}.", clases.Metadata, p.Nombre);
        propiedadReglas = new List<string>();
        if (p.Nombre == namasdev.Apps.Entidades.EntidadPropiedad.IdNombre(Model))
        {
            propiedadReglas.Add(string.Format("HasColumnName({0}.BD.ID)", clases.Metadata));
        }
        if (p.EsCalculada)
        {
            propiedadReglas.Add("HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed)");
        }
        else if (!p.PermiteNull && !p.Tipo.CLRTypeEsNullable)
        {
            propiedadReglas.Add("IsRequired()");
        }
        switch (p.PropiedadTipoId)
        {
            case PropiedadTipos.TEXTO:
                if (p.EspecificacionesTexto != null)
                {
                    var maxLength = p.EspecificacionesTexto.TamañoMaximo ?? p.EspecificacionesTexto.TamañoExacto;
                    if (maxLength.HasValue)
                    {
                        propiedadReglas.Add(string.Format("HasMaxLength({0}TAMAÑO_MAX)", propiedadMetadataBase));
                    }
                }
                break;
            case PropiedadTipos.DECIMAL:
                if (p.EspecificacionesDecimal != null)
                {
                    propiedadReglas.Add(string.Format("HasPrecision({0}DIGITOS_ENTEROS + {0}DIGITOS_DECIMALES,{0}DIGITOS_DECIMALES)", propiedadMetadataBase));
                }
                break;
        }
        if (propiedadReglas.Any())
        {
            propiedadesReglas.Add(string.Format("p.{0}", p.NombreOId), Formateador.Lista(propiedadReglas, "."));
        }
    }
    var asociaciones = new List<string>();
    string asociacionParte1Regla,
        asociacionParte2Regla,
        origenPropiedadNavegacion,
        destinoPropiedadNavegacion;
    bool asociacionTieneReglaForeignKey;
    foreach (var a in Model.AsociacionesOrigen.OrderBy(ao => ao.OrigenPropiedad.Orden))
    {
        asociacionParte1Regla = asociacionParte2Regla = null;
        asociacionTieneReglaForeignKey = false;
        origenPropiedadNavegacion = namasdev.Core.Types.StringExtensiones.TrimEnd(a.OrigenPropiedad.Nombre, "Id");
        destinoPropiedadNavegacion = a.OrigenEntidad.NombrePlural;
        switch (a.DestinoAsociacionMultiplicidadId)
        {
            case AsociacionMultiplicidades.CERO_UNO:
                asociacionParte1Regla = "HasOptional";

                switch (a.OrigenAsociacionMultiplicidadId)
                {
                    case AsociacionMultiplicidades.CERO_UNO:
                        asociacionParte2Regla = "WithOptionalDependent";
                        break;

                    case AsociacionMultiplicidades.UNO:
                        asociacionParte2Regla = "WithRequired";
                        break;

                    case AsociacionMultiplicidades.MUCHOS:
                        asociacionParte2Regla = "WithMany";
                        asociacionTieneReglaForeignKey = true;
                        break;
                }
                break;

            case AsociacionMultiplicidades.UNO:
                asociacionParte1Regla = "HasRequired";

                switch (a.OrigenAsociacionMultiplicidadId)
                {
                    case AsociacionMultiplicidades.CERO_UNO:
                        asociacionParte2Regla = "WithOptional";
                        break;

                    case AsociacionMultiplicidades.UNO:
                        asociacionParte2Regla = "WithRequiredDependent";
                        break;

                    case AsociacionMultiplicidades.MUCHOS:
                        asociacionParte2Regla = "WithMany";
                        asociacionTieneReglaForeignKey = true;
                        break;
                }
                break;

            case AsociacionMultiplicidades.MUCHOS:
                asociacionParte1Regla = "HasMany";

                switch (a.OrigenAsociacionMultiplicidadId)
                {
                    case AsociacionMultiplicidades.CERO_UNO:
                        asociacionParte2Regla = "WithOptional";
                        break;

                    case AsociacionMultiplicidades.UNO:
                        asociacionParte2Regla = "WithRequiredDependent";
                        break;

                    case AsociacionMultiplicidades.MUCHOS:
                        asociacionParte2Regla = "WithMany";
                        break;
                }

                break;
        }
        asociaciones.Add(string.Format("{0}(p => p.{1}).{2}(p => p.{3}){4}", asociacionParte1Regla, origenPropiedadNavegacion, asociacionParte2Regla, destinoPropiedadNavegacion, (asociacionTieneReglaForeignKey ? string.Format(".HasForeignKey(p => p.{0})", a.DestinoPropiedad.Nombre) : "")));
    }
}
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity.ModelConfiguration;

using namasdev.Data.Entity.Config;

using @(Html.Raw(namespaces.Aplicacion)).Entidades;
using @(Html.Raw(namespaces.Aplicacion)).Entidades.Metadata;

namespace @(Html.Raw(namespaces.Aplicacion)).Datos.Sql.Config
{
    public class @Html.Raw(clases.Config) : @Html.Raw(FormatoHelper.Generic(clases.ConfigBase, Model.Nombre))
    {
        public @(Html.Raw(clases.Config))()
        {
            ToTable(@(Html.Raw(clases.Metadata)).BD.TABLA);
            @if (Model.PropiedadesDefault.IDPropiedadTipoId.HasValue)
            {
            <text>HasKey(p => p.Id);</text>
            }
            else if (Model.Claves.Count == 1)
            {
            <text>HasKey(p => p.@Html.Raw(Model.Claves[0].Propiedad.Nombre));</text>
            }
            else if (Model.Claves.Count > 1)
            {
            <text>HasKey(p => new { @Html.Raw(string.Join(", ", Model.Claves.Select(c => string.Format("p.{0}", c.Propiedad.Nombre)))) });</text>
            }

            @foreach (var p in propiedadesReglas)
            {
            <text>Property(p => @Html.Raw(p.Key)).@Html.Raw(p.Value);</text>
            }

            @foreach (var a in asociaciones)
            {
            <text>@Html.Raw(a);</text>
            }
        }
    }
}
