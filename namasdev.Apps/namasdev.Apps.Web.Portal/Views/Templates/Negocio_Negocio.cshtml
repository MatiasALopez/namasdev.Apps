@using namasdev.Core.Types;
@using namasdev.Apps.Entidades.Valores;
@using namasdev.Apps.Web.Portal.Helpers;
@model namasdev.Apps.Entidades.Entidad
@{
    string namespaceBase = Model.AplicacionVersion.Aplicacion.Nombre;
    var clasesNombres = new
    {
        Entidad = Model.Nombre,
        Negocio = string.Format("{0}Negocio", Model.NombrePlural),
        Repositorio = string.Format("{0}Repositorio", Model.NombrePlural),
        MetadataPropiedades = string.Format("{0}Metadata.Propiedades", Model.Nombre),
    };
    var interfacesNombres = new
    {
        Negocio = string.Format("I{0}", clasesNombres.Negocio),
        Repositorio = string.Format("I{0}", clasesNombres.Repositorio)
    };
    var variablesNombres = new
    {
        Repositorio = "repositorio",
        ErroresNegocio = "erroresNegocio",
        Mapper = "mapper",
        Parametros = "parametros",
        Entidad = "entidad",
        UsuarioId = "usuarioId",
    };
}
using System;
using System.Collections.Generic;

using AutoMapper;

using namasdev.Core.Entity;
using namasdev.Core.Validation;
using @(namespaceBase).Datos;
using @(namespaceBase).Entidades;
using @(namespaceBase).Entidades.Metadata;
using @(namespaceBase).Negocio.DTO.@(Model.NombrePlural);

namespace @(namespaceBase).Negocio
{
    public interface @interfacesNombres.Negocio
    {
        @clasesNombres.Entidad Agregar(AgregarParametros parametros);
        void Actualizar(ActualizarParametros parametros);
        @if (Model.PropiedadesDefault.AuditoriaBorrado)
        {
        <text>void MarcarComoBorrado(MarcarComoBorradoParametros parametros);
        void DesmarcarComoBorrado(DesmarcarComoBorradoParametros parametros);</text>
        }
    }

    public class @clasesNombres.Negocio : @string.Format("NegocioBase<{0}>", clasesNombres.Repositorio)
    {
        public @(clasesNombres.Negocio)(@interfacesNombres.Repositorio @variablesNombres.Repositorio, IErroresNegocio @variablesNombres.ErroresNegocio, IMapper @variablesNombres.Mapper)
            : base(@variablesNombres.Repositorio, @variablesNombres.ErroresNegocio, @variablesNombres.Mapper)
        {
        }

        public @clasesNombres.Entidad Agregar(AgregarParametros @variablesNombres.Parametros)
        {
            Validador.ValidarArgumentRequeridoYThrow(@variablesNombres.Parametros, nameof(@variablesNombres.Parametros));

            DateTime fechaHora = DateTime.Now;

            var @variablesNombres.Entidad = @(string.Format("Mapper.Map<{0}>", clasesNombres.Entidad))(@variablesNombres.Parametros);
            @(variablesNombres.Entidad).EstablecerDatosCreado(@(variablesNombres).UsuarioLogueadoId, fechaHora);
            @(variablesNombres.Entidad).EstablecerDatosModificacion(@(variablesNombres).UsuarioLogueadoId, fechaHora);

            ValidarDatos(@variablesNombres.Entidad);

            Repositorio.Agregar(@variablesNombres.Entidad);

            return @variablesNombres.Entidad;
        }

        public void Actualizar(ActualizarParametros @variablesNombres.Parametros)
        {
            Validador.ValidarArgumentRequeridoYThrow(@variablesNombres.Parametros, nameof(@variablesNombres.Parametros));

            DateTime fechaHora = DateTime.Now;

            var @variablesNombres.Entidad = Obtener(@(variablesNombres.Parametros).Id);
            Mapper.Map(@variablesNombres.Parametros, @variablesNombres.Entidad);
            @(variablesNombres.Entidad).EstablecerDatosModificacion(@(variablesNombres.Parametros).UsuarioLogueadoId, fechaHora);

            ValidarDatos(@variablesNombres.Entidad);

            Repositorio.Actualizar(@variablesNombres.Entidad);
        }
        @if (Model.PropiedadesDefault.AuditoriaBorrado)
        {<text>
        public void MarcarComoBorrado(MarcarComoBorradoParametros @variablesNombres.Parametros)
        {
            Validador.ValidarArgumentRequeridoYThrow(@variablesNombres.Parametros, nameof(@variablesNombres.Parametros));
    
            DateTime fechaHora = DateTime.Now;

            var @variablesNombres.Entidad = @(string.Format("Mapper.Map<{0}>", clasesNombres.Entidad))(@variablesNombres.Parametros);
            @(variablesNombres.Entidad).EstablecerDatosBorrado(@(variablesNombres.Parametros).UsuarioLogueadoId, fechaHora);

            Repositorio.ActualizarDatosBorrado(@variablesNombres.Entidad);
        }

        public void DesmarcarComoBorrado(DesmarcarComoBorradoParametros @variablesNombres.Parametros)
        {
            Validador.ValidarArgumentRequeridoYThrow(@variablesNombres.Parametros, nameof(@variablesNombres.Parametros));

            var @variablesNombres.Entidad = @(string.Format("Mapper.Map<{0}>", clasesNombres.Entidad))(@variablesNombres.Parametros);
            Repositorio.ActualizarDatosBorrado(@variablesNombres.Entidad);
        }
        </text>}

        private void ValidarDatos(@clasesNombres.Entidad entidad)
        {
            var errores = new List@(Html.Raw("<string>"))();

@foreach (var p in Model.Propiedades)
{
    switch (p.PropiedadTipoId)
    {
        case PropiedadTipos.TEXTO:
            <text>Validador.ValidarStringYAgregarAListaErrores(entidad.@p.Nombre, @(clasesNombres.MetadataPropiedades).@(p.NombreOId).ETIQUETA, requerido: @((!p.PermiteNull).ToString().ToLower()), errores, tamañoMaximo: @StringExtensiones.ValueNotEmptyOrNull(Convert.ToString(p.EspecificacionesTexto.TamañoMaximo), valorNull: "null"), tamañoExacto: @StringExtensiones.ValueNotEmptyOrNull(Convert.ToString(p.EspecificacionesTexto.TamañoExacto), valorNull: "null"), regEx: @StringExtensiones.ValueNotEmptyOrNull(Convert.ToString(p.EspecificacionesTexto.RegEx), valorNull: "null"));</text>
            break;
        case PropiedadTipos.ENTERO:
            <text>Validador.ValidarNumeroYAgregarAListaErrores(entidad.@p.Nombre, @(clasesNombres.MetadataPropiedades).@(p.NombreOId).ETIQUETA, requerido: @((!p.PermiteNull).ToString().ToLower()), errores, valorMinimo: @StringExtensiones.ValueNotEmptyOrNull(Convert.ToString(p.EspecificacionesEntero.ValorMinimo), valorNull: "null"), valorMaximo: @StringExtensiones.ValueNotEmptyOrNull(Convert.ToString(p.EspecificacionesEntero.ValorMaximo), valorNull: "null"));</text>
            break;
        case PropiedadTipos.ENTERO_CORTO:
            <text>Validador.ValidarNumeroYAgregarAListaErrores(entidad.@p.Nombre, @(clasesNombres.MetadataPropiedades).@(p.NombreOId).ETIQUETA, requerido: @((!p.PermiteNull).ToString().ToLower()), errores, valorMinimo: @StringExtensiones.ValueNotEmptyOrNull(Convert.ToString(p.EspecificacionesEnteroCorto.ValorMinimo), valorNull: "null"), valorMaximo: @StringExtensiones.ValueNotEmptyOrNull(Convert.ToString(p.EspecificacionesEnteroCorto.ValorMaximo), valorNull: "null"));</text>
            break;
        case PropiedadTipos.ENTERO_LARGO:
            <text>Validador.ValidarNumeroYAgregarAListaErrores(entidad.@p.Nombre, @(clasesNombres.MetadataPropiedades).@(p.NombreOId).ETIQUETA, requerido: @((!p.PermiteNull).ToString().ToLower()), errores, valorMinimo: @StringExtensiones.ValueNotEmptyOrNull(Convert.ToString(p.EspecificacionesEnteroLargo.ValorMinimo), valorNull: "null"), valorMaximo: @StringExtensiones.ValueNotEmptyOrNull(Convert.ToString(p.EspecificacionesEnteroLargo.ValorMaximo), valorNull: "null"));</text>
            break;
        case PropiedadTipos.DECIMAL:
            <text>Validador.ValidarNumeroYAgregarAListaErrores(entidad.@p.Nombre, @(clasesNombres.MetadataPropiedades).@(p.NombreOId).ETIQUETA, requerido: @((!p.PermiteNull).ToString().ToLower()), errores, valorMinimo: @StringExtensiones.ValueNotEmptyOrNull(FormatoHelper.ValorConSufijo(p.EspecificacionesDecimal.ValorMinimo), valorNull: "null"), valorMaximo: @StringExtensiones.ValueNotEmptyOrNull(FormatoHelper.ValorConSufijo(p.EspecificacionesDecimal.ValorMaximo), valorNull: "null"), cantDecimales: @StringExtensiones.ValueNotEmptyOrNull(Convert.ToString(p.EspecificacionesDecimal.DigitosDecimales), valorNull: "null"));</text>
            break;
        case PropiedadTipos.DECIMAL_FLOTANTE:
            <text>Validador.ValidarNumeroYAgregarAListaErrores(entidad.@p.Nombre, @(clasesNombres.MetadataPropiedades).@(p.NombreOId).ETIQUETA, requerido: @((!p.PermiteNull).ToString().ToLower()), errores, valorMinimo: @StringExtensiones.ValueNotEmptyOrNull(Convert.ToString(p.EspecificacionesDecimalFlotante.ValorMinimo), valorNull: "null"), valorMaximo: @StringExtensiones.ValueNotEmptyOrNull(Convert.ToString(p.EspecificacionesDecimalFlotante.ValorMaximo), valorNull: "null"), cantDecimales: @StringExtensiones.ValueNotEmptyOrNull(Convert.ToString(p.EspecificacionesDecimalFlotante.DigitosDecimales), valorNull: "null"));</text>
            break;
    }
}

            Validador.LanzarExcepcionMensajeAlUsuarioSiExistenErrores(errores);
        }
    }
}
