@using namasdev.Core.Types;
@using namasdev.Apps.Entidades.Valores;
@model namasdev.Apps.Entidades.Entidad
@{
    var namespaces = new
    {
        Aplicacion = Model.AplicacionVersion.Aplicacion.Nombre
    };
    var clases = new
    {
        Entidad = Model.Nombre,
        Metadata = string.Format("{0}Metadata", Model.Nombre),
        MetadataMensajes = string.Format("{0}Metadata.Mensajes", Model.Nombre),
        ItemModel = string.Format("{0}ItemModel", Model.Nombre),
        ListaViewModel = string.Format("{0}ViewModel", Model.NombrePlural),
        Controller = string.Format("{0}Controller", Model.NombrePlural),
    };
    var javaScript = new
    {
        App = Model.AplicacionVersion.Aplicacion.Nombre,
    };
    string propiedadIdNombre = null;
    var propiedades = new Dictionary<string, string>();
    foreach (var p in Model.Propiedades)
    {
        if (p.EsCalculada || p.EsAuditoria)
        {
            continue;
        }
        if (p.EsId)
        {
            propiedadIdNombre = p.NombreOId;
            continue;
        }
        switch (p.PropiedadTipoId)
        {
            case PropiedadTipos.ENTERO:
            case PropiedadTipos.ENTERO_CORTO:
            case PropiedadTipos.ENTERO_LARGO:
                propiedades.Add(p.NombreOId, string.Format("@Formateador.Numero(item.{0})", p.NombreOId));
                break;
            case PropiedadTipos.DECIMAL:
                propiedades.Add(p.NombreOId, string.Format("@Formateador.Numero(item.{0}, cantDecimales: {1})", p.NombreOId, p.EspecificacionesDecimal.DigitosDecimales));
                break;
            case PropiedadTipos.DECIMAL_FLOTANTE:
                propiedades.Add(p.NombreOId, string.Format("@Formateador.Numero(item.{0}, cantDecimales: {1})", p.NombreOId, p.EspecificacionesDecimalFlotante.DigitosDecimales));
                break;
            case PropiedadTipos.IMPORTE:
                propiedades.Add(p.NombreOId, string.Format("@Formateador.Moneda(item.{0}, cantDecimales: 2)", p.NombreOId));
                break;
            case PropiedadTipos.FECHA_HORA:
                propiedades.Add(p.NombreOId, string.Format("@Formateador.FechaYHora(item.{0})", p.NombreOId));
                break;
            case PropiedadTipos.FECHA:
                propiedades.Add(p.NombreOId, string.Format("@Formateador.Fecha(item.{0})", p.NombreOId));
                break;
            case PropiedadTipos.HORA:
                propiedades.Add(p.NombreOId, string.Format("@Formateador.Hora(item.{0})", p.NombreOId));
                break;
            case PropiedadTipos.BOOLEANO:
                propiedades.Add(p.NombreOId, string.Format("@Formateador.SiNo(item.{0})", p.NombreOId));
                break;
            default:
                propiedades.Add(p.NombreOId, string.Format("item.{0}", p.NombreOId));
                break;
        }
    }
    bool esSoloLectura = Model.Especificaciones.EsSoloLectura,
        eliminarDisponible = Model.Especificaciones.BajaTipoId != BajaTipos.NINGUNA;
}
@@using namasdev.Core.Types;
@@using namasdev.Web.Helpers;
@@using @(Html.Raw(namespaces.Aplicacion)).Entidades;
@@using @(Html.Raw(namespaces.Aplicacion)).Entidades.Metadata;
@@using @(Html.Raw(namespaces.Aplicacion)).Web.Portal.Controllers;
@@model @(Html.Raw(namespaces.Aplicacion)).Web.Portal.ViewModels.@(Html.Raw(Model.NombrePlural)).@(Html.Raw(clases.ListaViewModel))
@@{
    ViewBag.Title = @(Html.Raw(clases.Metadata)).ETIQUETA_PLURAL;

    var controlesIds = new
    {
        Form = $"frm{@(Html.Raw(clases.Metadata)).NOMBRE_PLURAL}",
        TablaContainer = $"div{@(Html.Raw(clases.Metadata)).NOMBRE_PLURAL}Container",
        Tabla = $"tbl{@(Html.Raw(clases.Metadata)).NOMBRE_PLURAL}",
    };
    var displayNames = new
    {
        //Busqueda = Html.DisplayNameWithoutEncodingFor(m => m.Busqueda).ToString()
    };
    @if (!esSoloLectura) 
    {
    <text>var clasesCss = new
    {
        BotonEliminar = "btn-eliminar"
    };</text>
    }
}
<h2 class="my-2">@@ViewBag.Title</h2>
@@Html.Partial("_ResultadoOk")
@@Html.Partial("_Errores")
<div class="row my-3">
    @if (!esSoloLectura)
    {
    <div class="col-md-3">
        <a href="@Html.Raw(string.Format("@Url.Action(nameof({0}.Agregar))", clases.Controller))" class="btn btn-primary">Agregar</a>
    </div>
    }
    <div class="col-md-@(!esSoloLectura ? "9" : "12") text-right filtros">
        @@*@@using (Html.BeginForm(@Html.Raw(string.Format("nameof({0}.Index)", clases.Controller)), @(Html.Raw(clases.Controller)).NAME, FormMethod.Get, new { @@class = "form-inline pull-right" }))
        {
        @@Html.TextBoxFor(m => m.Busqueda, new { @@class = "form-control ml-1", placeholder = displayNames.Busqueda, title = displayNames.Busqueda, data_toggle = "tooltip" })
        <button type="submit" class="btn btn-secondary ml-1">Buscar</button>
        }*@@
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        @@if (Model.TieneItems)
        {
            <div id="@("@controlesIds.TablaContainer")" class="table-responsive">
                <form id="@("@controlesIds.Form")">
                    @@Html.AntiForgeryToken()
                </form>
                <table id="@("@controlesIds.Tabla")" class="table table-striped table-bordered">
                    <thead>
                        <tr>
                        @foreach (var p in propiedades)
                        {
                            <th><a href="@Html.Raw(string.Format("@URLHelper.GenerarUrlConOrden(Request.Url, nameof({0}.{1}))", clases.Entidad, p.Key))">@@Html.DisplayNameFor(m => m.Items[0].@(Html.Raw(p.Key))) <i class="fa fa-sort ml-2"></i></a></th>
                        }
                        @if (!esSoloLectura)
                        {   <th></th> 
                        }
                        </tr>
                    </thead>
                    <tbody>
                        @@foreach (var item in Model.Items)
                        {
                            <tr>
                            @foreach (var p in propiedades)
                            {
                                <td>@@Html.Raw(@Html.Raw(p.Value))</td>
                            }
                            @if (!esSoloLectura) 
                            {   <td class="text-center">
                                    <a href="@Html.Raw(string.Format("@Url.Action(nameof({0}.Editar), new {{ id = item.{1} }})", clases.Controller, propiedadIdNombre))" class="btn btn-sm btn-outline-secondary"><i class="fa fa-edit" data-toggle="tooltip" title="Editar"></i></a>
                                    @if (eliminarDisponible)
                                    {
                                    <button class="btn btn-sm btn-outline-danger @("@clasesCss.BotonEliminar")" data-id="@Html.Raw(string.Format("@item.{0}", propiedadIdNombre))"><i data-toggle="tooltip" title="Eliminar" class="fa fa-trash"></i></button>
                                    }
                                </td>
                            }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            @@Html.Partial("_Paginador", Model.Paginacion)
        }
        else
        {
            <div class="alert alert-warning">No hay @@@(Html.Raw(clases.Metadata)).ETIQUETA_PLURAL para mostrar.</div>
        }
    </div>
</div>
@@section bodyScripts {
<script type="text/javascript">
    $(function () {
        @(javaScript.App).setActiveMenuOption('@Html.Raw(Model.NombrePlural.ToFirstLetterLowercase())');
        @if (eliminarDisponible) {
        <text>
        $('#@@controlesIds.Tabla')
            .on('click', '.@@clasesCss.BotonEliminar', function (ev) {
                ev.preventDefault();

                var id = $(this).data('id');
                if (!id) {
                    return;
                }

                var options = {
                    showLoadingSelector: '#@@controlesIds.TablaContainer',
                    confirm: true,
                    confirmTitle: 'Eliminar @@@(Html.Raw(clases.Metadata)).ETIQUETA',
                    confirmMessage: '@@@(Html.Raw(clases.MetadataMensajes)).ELIMINAR_CONFIRMACION'
                };
                @(javaScript.App).postJson(
                    '@@Url.Action(nameof(@(Html.Raw(clases.Controller)).Eliminar))/' + id,
                    nmd.ui.forms.createDataWithAntiForgeryToken('#@@controlesIds.Form'),
                    function (response) {
                        if (response.success) {
                            nmd.ui.controls.showSuccessModal(
                                '@@@(Html.Raw(clases.MetadataMensajes)).ELIMINAR_OK',
                                function () {
                                    nmd.page.reloadPage();
                                });
                        }
                        else {
                            @(javaScript.App).showErrorModal(response.message);
                        }
                    },
                    options
                );

                return false;
            });</text>
        }
    });
</script>
}